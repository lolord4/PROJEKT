import telebot
from telebot import types
import sqlite3
import time
conn = sqlite3.connect('user.db', check_same_thread=False)
cursor = conn.cursor()
tables = [
    "users (user_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT, last_name TEXT, phone_number TEXT, name TEXT)",
    "active_orders (order_id INTEGER PRIMARY KEY, user_id INTEGER, order_info TEXT)",
    "delivered_orders (order_id INTEGER PRIMARY KEY, user_id INTEGER, order_info TEXT)",
    "active_orders (order_id INTEGER PRIMARY KEY, user_id INTEGER, order_info TEXT)",
    "shopping_cart (cart_id INTEGER PRIMARY KEY, user_id INTEGER, product_name TEXT, quantity INTEGER)"
]
for table in tables:
    cursor.execute(f'CREATE TABLE IF NOT EXISTS {table}')
    conn.commit()
user_states = {
    "waiting_for_name": "waiting_for_name",
    "waiting_for_contact": "waiting_for_contact",
    "menu": "menu",
    "shop": "shop",
    "cart": "cart",
    "product_info": "product_info"
}

product_info = {
    "–±—É—Ä–≥–µ—Ä": "–°–æ—á–Ω—ã–π –±—É—Ä–≥–µ—Ä —Å –≥–æ–≤—è–∂—å–µ–π –∫–æ—Ç–ª–µ—Ç–æ–π, –æ–≤–æ—â–∞–º–∏ –∏ —Å–æ—É—Å–æ–º\n\n–¶–µ–Ω–∞:300‚ÇΩ",
    "—à–∞—É—Ä–º–∞": "–ê—Ä–æ–º–∞—Ç–Ω–∞—è —à–∞—É—Ä–º–∞ —Å –∫—É—Ä–∏—Ü–µ–π, –æ–≤–æ—â–∞–º–∏ –∏ —Å–æ—É—Å–æ–º\n\n–¶–µ–Ω–∞:250‚ÇΩ",
    "—Ä–æ–ª–ª—ã": "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ä–æ–ª–ª–æ–≤ —Å –ª–æ—Å–æ—Å–µ–º, –∞–≤–æ–∫–∞–¥–æ –∏ –æ–≥—É—Ä—Ü–æ–º\n\n–¶–µ–Ω–∞:450‚ÇΩ",
    "–∫–æ–ª–∞": "–ì–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ Coca-Cola\n\n–¶–µ–Ω–∞:99‚ÇΩ",
    "–≤–æ–¥–∞": "–ß–∏—Å—Ç–∞—è –ø–∏—Ç—å–µ–≤–∞—è –≤–æ–¥–∞\n\n–¶–µ–Ω–∞:40‚ÇΩ"
}

product_prices = { 
   "–±—É—Ä–≥–µ—Ä": 300,
   "—à–∞—É—Ä–º–∞": 250,
   "—Ä–æ–ª–ª—ã": 450,  
   "–∫–æ–ª–∞": 99,
   "–≤–æ–¥–∞": 40
}
user_data = {}
bot = telebot.TeleBot('')
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    registered_user = cursor.fetchone()
    if registered_user:
        user_states[user_id] = "menu"
        show_menu(message.chat.id)
    else:
        user_states[user_id] = "waiting_for_name"
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:")
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "waiting_for_name")
def handle_name(message):
    user_id = message.from_user.id
    name = message.text
    if len(name) > 0:
        user_states[user_id] = "waiting_for_contact"
        user_data[user_id] = {"name": name}
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item = types.KeyboardButton("‚úÖ–ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É‚úÖ", request_contact=True)
        markup.add(item)
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:")
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    user_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name if message.from_user.last_name else ""
    phone_number = message.contact.phone_number
    if user_id == message.contact.user_id:
        name = user_data.get(user_id, {}).get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        cursor.execute("INSERT INTO users (user_id, username, first_name, last_name, phone_number, name) VALUES (?, ?, ?, ?, ?, ?)",
                       (user_id, username, first_name, last_name, phone_number, name))
        conn.commit()
        markup = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=markup)
        bot.send_message(message.chat.id, "–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫", reply_markup=markup)
        user_states[user_id] = "menu"
        show_menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.")
@bot.callback_query_handler(func=lambda call: call.data.startswith("show_product"))
def show_product_info_handler(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    product_name = call.data.split("_")[2]
    user_states[user_id] = "product_info"
    show_product_info(chat_id, product_name, message_id)
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    handle_callback(call.data, user_id, chat_id, message_id)
def handle_callback(callback_data, user_id, chat_id, message_id):
    if callback_data == "shop":
        user_states[user_id] = "shop"
        show_shop(chat_id, user_id, message_id)
    elif callback_data == "profile":
        user_states[user_id] = "profile"
        show_profile(chat_id, user_id, message_id)
    elif callback_data == "orders":
        user_states[user_id] = "orders"
        show_orders(chat_id, user_id, message_id)
    elif callback_data == "clear_orders":
        clear_orders(user_id)
        show_orders(chat_id, user_id, message_id)
    elif callback_data == "contacts":
        user_states[user_id] = "contacts"
        show_result_with_back(chat_id, "üìç–Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: @classic_nugget\n–†–µ–∫–ª–∞–º–∞: @classic_nugget\n\n—Å–∞–π—Ç–∞ –Ω–µ—Ç, –Ω–æ –º–æ–∂–µ—Ç –∏ –±—É–¥–µ—Ç", message_id)
    elif callback_data == "invite":
        user_states[user_id] = "invite"
        show_result_with_back(chat_id, "üë•–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ—Ç, —Ç–æ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ:\n\nhttps://t.me/deliverystable_bot", message_id)
    elif callback_data == "back_to_menu":
        user_states[user_id] = "menu"
        bot.delete_message(chat_id, message_id)
        show_menu(chat_id)
    elif callback_data == "cart":
        user_states[user_id] = "cart"
        show_cart(chat_id, user_id, message_id)
    elif callback_data.startswith("add_to_cart"):
        product_name = callback_data.split("_")[3]
        if user_states[user_id] == "product_info":
            add_to_cart(user_id, product_name, message_id)
            show_shop(chat_id, user_id, message_id)
        else:
            user_states[user_id] = "cart"
            add_to_cart(user_id, product_name, message_id)
            show_cart(chat_id, user_id, message_id)
    elif callback_data == "clear_cart":
        clear_cart(user_id)
        show_cart(chat_id, user_id, message_id)
    elif callback_data == "place_order":
        place_order(user_id)
        show_cart(chat_id, user_id, message_id)
    
def clear_cart(user_id):
    cursor.execute("DELETE FROM shopping_cart WHERE user_id=?", (user_id,))
    conn.commit()
def add_to_cart(user_id, product_name, message_id):
    cursor.execute("SELECT * FROM shopping_cart WHERE user_id=? AND product_name=?", (user_id, product_name))
    existing_item = cursor.fetchone()
    if existing_item:
        new_quantity = existing_item[3] + 1
        cursor.execute("UPDATE shopping_cart SET quantity=? WHERE user_id=? AND product_name=?", (new_quantity, user_id, product_name))
    else:
        cursor.execute("INSERT INTO shopping_cart (user_id, product_name, quantity) VALUES (?, ?, 1)", (user_id, product_name))
    conn.commit()
    msg = bot.send_message(user_id, f"–¢–æ–≤–∞—Ä '{product_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    time.sleep(2)
    bot.delete_message(user_id, msg.message_id)

def place_order(user_id):
    cursor.execute("SELECT * FROM shopping_cart WHERE user_id=?", (user_id,))
    cart_items = cursor.fetchall()
    if not cart_items:
        bot.send_message(user_id, "üõí–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
        return
    order_info = ""
    total_price = calculate_total_price(user_id)
    for item in cart_items:
        order_info += f"–¢–æ–≤–∞—Ä: {item[2]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item[3]}\n"
    cursor.execute("SELECT name, phone_number FROM users WHERE user_id=?", (user_id,))
    user_info = cursor.fetchone()
    user_name = user_info[0]
    user_phone = user_info[1]
    cursor.execute("INSERT INTO active_orders (user_id, order_info) VALUES (?, ?)", (user_id, order_info))
    conn.commit()
    group_id = 
    order_message = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n–ò–º—è: {user_name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_phone}\n\n{order_info}\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±."
    bot.send_message(group_id, order_message)
    clear_cart(user_id)
    bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.")
    clear_cart(user_id)
    bot.send_message(user_id, "—Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä.\n\n–≤–æ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–∑–≤–∞—Ç—å –∞–¥—Ä–µ—Å –∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã")

def show_result_with_back(chat_id, result_message, message_id, markup=None):
    if markup is None:
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
        markup.add(back_button)
    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=result_message, reply_markup=markup)
def show_menu(chat_id, show_back_button=False):
    markup = types.InlineKeyboardMarkup()
    if show_back_button:
        back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
        markup.add(back_button)
    item_menu = types.InlineKeyboardButton("üóÇÔ∏è –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop')
    item_profile = types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')
    item_orders = types.InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='orders')
    item_cart = types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='cart')
    item_contacts = types.InlineKeyboardButton("üìç –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')
    item_invite = types.InlineKeyboardButton("üôç –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data='invite')
    markup.add(item_menu, item_cart)
    markup.add(item_orders, item_profile)
    markup.add(item_contacts, item_invite)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –¥–ª—è –≤–∞—Å —Ä–∞–∑–¥–µ–ª", reply_markup=markup)
def show_shop(chat_id, user_id, message_id):
    markup = types.InlineKeyboardMarkup()
    products = [
        types.InlineKeyboardButton("üçî–ë—É—Ä–≥–µ—Ä", callback_data='show_product_–±—É—Ä–≥–µ—Ä'),
        types.InlineKeyboardButton("üåØ–®–∞—É—Ä–º–∞", callback_data='show_product_—à–∞—É—Ä–º–∞'),
        types.InlineKeyboardButton("üç£–†–æ–ª–ª—ã", callback_data='show_product_—Ä–æ–ª–ª—ã'),
        types.InlineKeyboardButton("ü•§–ö–æ–ª–∞", callback_data='show_product_–∫–æ–ª–∞'),
        types.InlineKeyboardButton("üíß–í–æ–¥–∞", callback_data='show_product_–≤–æ–¥–∞'),
    ]
    for product in products:
        markup.add(product)
    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
    markup.add(back_button)
    result_message = "üòã–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä"
    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=result_message, reply_markup=markup)

def show_product_info(chat_id, product_name, message_id):
    product_description = product_info.get(product_name.lower(), "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    photo_caption = f"{product_name}\n\n{product_description}"
    markup = types.InlineKeyboardMarkup()
    add_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_name}")
    markup.add(add_button)
    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
    markup.add(back_button)
    try:
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=photo_caption, reply_markup=markup)
    except telebot.apihelper.ApiException:
        bot.send_message(chat_id, photo_caption, reply_markup=markup)

def show_cart(chat_id, user_id, message_id):
    cursor.execute("SELECT product_name, quantity FROM shopping_cart WHERE user_id=?", (user_id,))
    cart_items = cursor.fetchall()
    cart_text = "\n".join([f"–¢–æ–≤–∞—Ä: {item[0]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item[1]}" for item in cart_items])
    result_message = f"üõí–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{cart_text}"
    markup = types.InlineKeyboardMarkup()
    clear_button = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å", callback_data='clear_cart')
    order_button = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å", callback_data='place_order')
    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
    markup.add(clear_button, order_button)
    markup.add(back_button)
    show_result_with_back(chat_id, result_message, message_id, markup=markup)
def show_profile(chat_id, user_id, message_id):
    cursor.execute("SELECT name, phone_number FROM users WHERE user_id=?", (user_id,))
    user_info = cursor.fetchone()
    name = user_info[0]
    phone_number = user_info[1]
    result_message = f"‚ÑπÔ∏è–ò–º—è: {name}\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –∫—É—Ä—å–µ—Ä–æ–º: {phone_number}"
    show_result_with_back(chat_id, result_message, message_id)
def show_orders(chat_id, user_id, message_id):
    cursor.execute("SELECT order_info FROM active_orders WHERE user_id=?", (user_id,))
    active_orders = cursor.fetchall()
    if not active_orders:
        result_message = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
        show_result_with_back(chat_id, result_message, message_id)
        return
    result_message = "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n"
    for order_info in active_orders:
        total_price = calculate_order_total_price(order_info[0])
        result_message += f"–ó–∞–∫–∞–∑: {order_info[0]}\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.\n\n"
    markup = types.InlineKeyboardMarkup()
    clear_orders_button = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã", callback_data='clear_orders')
    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
    markup.add(clear_orders_button)
    markup.add(back_button)
    show_result_with_back(chat_id, result_message, message_id, markup=markup)
def clear_orders(user_id):
    cursor.execute("DELETE FROM active_orders WHERE user_id=?", (user_id,))
    conn.commit()
def show_cart(chat_id, user_id, message_id):
    cursor.execute("SELECT product_name, quantity FROM shopping_cart WHERE user_id=?", (user_id,))
    cart_items = cursor.fetchall()
    cart_text = "\n".join([f"–¢–æ–≤–∞—Ä: {item[0]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item[1]}" for item in cart_items])
    total_price = calculate_total_price(user_id)
    result_message = f"üõí–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{cart_text}\n\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±."
    markup = types.InlineKeyboardMarkup()
    clear_button = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å", callback_data='clear_cart')
    order_button = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å", callback_data='place_order')
    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
    markup.add(clear_button, order_button)
    markup.add(back_button)
    show_result_with_back(chat_id, result_message, message_id, markup=markup)
def calculate_total_price(user_id):
  total_price = 0
  cursor.execute("SELECT product_name, quantity FROM shopping_cart WHERE user_id=?", (user_id,))
  for item in cursor.fetchall():
     product_name = item[0]
     quantity = item[1]
     price = product_prices[product_name]
     total_price += price * quantity
  return total_price
def calculate_order_total_price(order_info):
    total_price = 0
    lines = order_info.split("\n")
    for line in lines:
        if line.startswith("–¢–æ–≤–∞—Ä:"):
            parts = line.split(", –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ")
            product_name = parts[0].split(": ")[1]
            quantity = int(parts[1])
            price = product_prices.get(product_name, 0)
            total_price += price * quantity
    return total_price
if __name__ == "__main__":
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            continue
